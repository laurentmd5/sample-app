pipeline {
    agent any
    
    triggers {
        pollSCM('H/5 * * * *')
    }
    
    environment {
        APP_NAME = 'hello-app'
        APP_PORT = '8090'
        DOCKER_REGISTRY = 'laurentmd5'
        DEPLOY_SERVER = 'devops@localhost'
        SSH_CREDENTIALS_ID = 'ubuntu-server-ssh'
        TRIVY_VERSION = '0.49.1'
        GOSEC_VERSION = '2.19.0'
        ZAP_VERSION = '2.14.0'
        TARGET_URL = "http://192.168.61.131:${APP_PORT}"
        // Configuration Git pour √©viter les prompts
        GIT_TERMINAL_PROMPT = '0'
    }
    
    stages {
        // √âTAPE 1: Checkout du Code
        stage('Checkout Code') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/laurentmd5/sample-app.git',
                    credentialsId: 'github-token2'

                sh '''
                echo "üì¶ Repository: https://github.com/laurentmd5/sample-app.git"
                echo "üìù Branch: master"
                echo "üîç Dernier commit:"
                git log -1 --oneline
                echo "üìÅ Contenu du repository:"
                ls -la
                '''
            }
        }
        
        // √âTAPE 2: Setup Environment et Outils de S√©curit√©
        stage('Setup Environment') {
            steps {
                sh '''
                echo "üîß Configuration de l environnement..."
                echo "=== Versions des outils ==="
                go version || echo "Go non install√©"
                docker --version || echo "Docker non disponible"
                
                echo "üì• Installation des outils de s√©curit√©..."
                
                echo "=== Configuration Git pour Go modules ==="
                git config --global url."https://github.com".insteadOf ssh://git@github.com || true
                
                echo "=== Installation de gosec ==="
                if ! which gosec; then
                    echo "Installation de gosec..."
                    # T√©l√©chargement direct depuis les releases GitHub
                    wget -q https://github.com/securecodewarrior/gosec/releases/download/v${GOSEC_VERSION}/gosec_${GOSEC_VERSION}_linux_amd64.tar.gz
                    tar -xzf gosec_${GOSEC_VERSION}_linux_amd64.tar.gz
                    sudo mv gosec /usr/local/bin/
                    rm -f gosec_${GOSEC_VERSION}_linux_amd64.tar.gz
                fi
                gosec --version || echo "Gosec installation √©chou√©e"
                
                echo "=== Installation de Trivy ==="
                if ! which trivy; then
                    wget -q https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.deb
                    sudo dpkg -i trivy_${TRIVY_VERSION}_Linux-64bit.deb
                    rm -f trivy_${TRIVY_VERSION}_Linux-64bit.deb
                fi
                trivy --version || echo "Trivy installation failed"
                
                echo "=== Installation de Lynis ==="
                which lynis || (sudo apt update && sudo apt install -y lynis)
                
                echo "‚úÖ Tous les outils sont pr√™ts"
                '''
            }
        }
        
        // √âTAPE 3: Build Application Go
        stage('Build Go Application') {
            steps {
                sh '''
                echo "üèóÔ∏è Construction de l application Go..."
                
                if [ ! -f "go.mod" ]; then
                    echo "üìù Initialisation de go.mod..."
                    go mod init hello-app
                fi
                
                echo "üì• T√©l√©chargement des d√©pendances..."
                # Configuration pour √©viter les probl√®mes d'authentification
                GOPRIVATE=""
                go env -w GOPRIVATE=""
                go mod download 2>&1 | tee go-mod.log || echo "Aucune d√©pendance ou d√©j√† t√©l√©charg√©es"
                
                echo "üî® Compilation de l application..."
                go build -v -o ${APP_NAME} .
                
                echo "‚úÖ V√©rification du build:"
                ls -la ${APP_NAME}
                file ${APP_NAME}
                chmod +x ${APP_NAME}
                '''
            }
        }
        
        // Les autres √©tapes restent similaires...
        // √âTAPE 4: Static Code Analysis - gosec
        stage('Static Code Analysis') {
            steps {
                sh '''
                echo "üîç Analyse Statique du Code avec gosec..."
                mkdir -p security-reports
                
                echo "=== Ex√©cution de gosec ==="
                if which gosec; then
                    gosec -fmt=json -out=security-reports/gosec-report.json ./... 2>/dev/null || true
                    gosec -fmt=html -out=security-reports/gosec-report.html ./... 2>/dev/null || true
                    gosec ./... 2>&1 | tee security-reports/gosec-output.txt || echo "Gosec a termin√© avec des findings"
                    echo "‚úÖ Analyse gosec termin√©e"
                else
                    echo "‚ö†Ô∏è gosec non disponible, analyse statique ignor√©e"
                fi
                
                echo "=== Ex√©cution de go vet ==="
                go vet ./... 2>&1 | tee security-reports/govet-output.txt || echo "Go vet termin√©"
                '''
            }
            post {
                always {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'security-reports',
                        reportFiles: 'gosec-report.html',
                        reportName: 'Rapport Gosec - Analyse Statique'
                    ])
                    archiveArtifacts artifacts: 'security-reports/gosec-report.*,security-reports/govet-output.txt', fingerprint: true
                }
            }
        }
        
        // ... (les autres √©tapes restent inchang√©es)
    }
    
    post {
        always {
            sh '''
            echo "Nettoyage final..."
            docker system prune -f 2>/dev/null || true
            
            echo ""
            echo "R√âSUM√â DE L EX√âCUTION"
            echo "Application Go construite"
            echo "Image Docker cr√©√©e"
            echo "Tests et couverture ex√©cut√©s"
            echo "Scans de s√©curit√© compl√©t√©s"
            echo "Application d√©ploy√©e"
            echo ""
            echo "RAPPORTS DISPONIBLES:"
            echo "Gosec: Analyse statique"
            echo "Tests: Couverture et r√©sultats"
            echo "Trivy: Scan containers et fichiers"
            echo "ZAP: Scan dynamique"
            echo "Lynis: Audit environnement"
            echo "R√©sum√© s√©curit√© complet"
            '''
            
            archiveArtifacts artifacts: 'security-reports/**,test-reports/**,trivy-reports/**,zap-reports/**,lynis-reports/**,${APP_NAME}', fingerprint: true
        }
        success {
            sh """
            echo ""
            echo "üéâ PIPELINE DE S√âCURIT√â COMPLET R√âUSSI!"
            echo "Tous les contr√¥les de s√©curit√© ont pass√©"
            echo "Application d√©ploy√©e s√©curitairement"
            echo "Acc√©dez √† l application: ${TARGET_URL}"
            """
        }
        failure {
            sh """
            echo "‚ùå PIPELINE EN √âCHEC"
            echo "Consultez les rapports pour plus de d√©tails"
            """
        }
    }
}
